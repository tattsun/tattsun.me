{"pageProps":{"article":{"slug":"2022-08-13-the-elements-of-computing-systems-05","matter":{"title":"コンピュータシステムの理論と実装　第５章　コンピュータアーキテクチャ"},"date":"2022-08-13","content":"<p>最近、<a href=\"https://www.oreilly.co.jp/books/9784873117126/\">コンピュータシステムの理論と実装</a>を読みながら手を動かしている。</p>\n<p>ブログの試運用も兼ねて読書ログを記録しておく。</p>\n<p><img src=\"https://i.imgur.com/4eUxFS6.png\" alt=\"Imgur\"></p>\n<h2 id=\"ソースコード\">ソースコード</h2>\n<p>一応以下のソースでテストは通ったが、CPUの比較周りのコードがかなり煩雑になってしまった…。</p>\n<h3 id=\"memoryhdl\">Memory.hdl</h3>\n<div class=\"remark-highlight\"><pre class=\"language-hdl\"><code class=\"language-hdl\">CHIP Memory {\n    IN in[16], load, address[15];\n    OUT out[16];\n\n    PARTS:\n    DMux(in=load, sel=address[14], a=loadram, b=loadio);\n    DMux(in=loadio, sel=address[13], a=loadscreen);\n\n    RAM16K(in=in, load=loadram, address=address[0..13], out=outram);\n    Screen(in=in, load=loadscreen, address=address[0..12], out=outscreen);\n    Keyboard(out=outkeyboard);\n\n    Mux16(a=outscreen, b=outkeyboard, sel=address[13], out=outio);\n    Mux16(a=outram, b=outio, sel=address[14], out=out);\n}</code></pre></div>\n<h3 id=\"cpuhdl\">CPU.hdl</h3>\n<div class=\"remark-highlight\"><pre class=\"language-hdl\"><code class=\"language-hdl\">CHIP CPU {\n\n    IN  inM[16],         // M value input  (M = contents of RAM[A])\n        instruction[16], // Instruction for execution\n        reset;           // Signals whether to re-start the current\n                         // program (reset==1) or continue executing\n                         // the current program (reset==0).\n\n    OUT outM[16],        // M value output\n        writeM,          // Write to M? \n        addressM[15],    // Address in data memory (of M)\n        pc[15];          // address of next instruction\n\n    PARTS:\n    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);\n    Not(in=instruction[15], out=instA);\n\n    Or(a=instA, b=instruction[5], out=saveA);\n    ARegister(in=inA, load=saveA, out=outA, out[0..14]=addressM);\n\n    Mux16(a=outA, b=inM, sel=instruction[12], out=outAorM);\n\n    And(a=instruction[4], b=instruction[15], out=loadD);\n    DRegister(in=outALU, load=loadD, out=outD);\n\n    ALU(x=outD, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);\n\n    And(a=instruction[15], b=instruction[3], out=writeM);\n\n    // Compare\n    Not(in=zr, out=notzr);\n    Not(in=ng, out=notng);\n\n    And(a=notzr, b=notng, out=jgt);\n    And(a=zr, b=true, out=jeq);\n    Or(a=zr, b=notng, out=jge);\n    And(a=notzr, b=ng, out=jlt);\n    And(a=notzr, b=true, out=jne);\n    Or(a=zr, b=ng, out=jle);\n\n\n    DMux8Way(in=true, sel=instruction[0..2], a=Inojmp, b=Ijgt, c=Ijeq, d=Ijge, e=Ijlt, f=Ijne, g=Ijle, h=Ijmp);\n\n    And(a=jgt, b=Ijgt, out=Rjgt);\n    And(a=jeq, b=Ijeq, out=Rjeq);\n    And(a=jge, b=Ijge, out=Rjge);\n    And(a=jlt, b=Ijlt, out=Rjlt);\n    And(a=jne, b=Ijne, out=Rjne);\n    And(a=jle, b=Ijle, out=Rjle);\n    \n    Or(a=Rjgt, b=Rjeq, out=w1);\n    Or(a=w1, b=Rjge, out=w2);\n    Or(a=w2, b=Rjlt, out=w3);\n    Or(a=w3, b=Rjne, out=w4);\n    Or(a=w4, b=Rjle, out=w5);\n    Or(a=w5, b=Rjgt, out=w6);\n    Or(a=w6, b=Ijmp, out=w7);\n    And(a=w7, b=instruction[15], out=loadPC);\n    Not(in=loadPC, out=notLoadPC);\n    \n    Or(a=Inojmp, b=instA, out=x1);\n    Or(a=x1, b=notLoadPC, out=Rnojmp);\n\n    PC(in=outA, load=loadPC, inc=Rnojmp, reset=reset, out[0..14]=pc);\n}</code></pre></div>\n<h3 id=\"computerhdl\">Computer.hdl</h3>\n<div class=\"remark-highlight\"><pre class=\"language-hdl\"><code class=\"language-hdl\">CHIP Computer {\n\n    IN reset;\n\n    PARTS:\n    \n    ROM32K(address=pc, out=instruction);\n    CPU(inM=inM, instruction=instruction, reset=reset, outM=outM, writeM=writeM, addressM=addressM, pc=pc);\n    Memory(in=outM, load=writeM, address=addressM, out=inM);\n}</code></pre></div>"}},"__N_SSG":true}